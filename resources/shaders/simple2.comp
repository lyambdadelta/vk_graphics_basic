#version 430
#define BLOCK_SIZE 256

layout( local_size_x = 256 ) in;

layout( push_constant ) uniform params {
  uint len;
} PushConstant;

layout(std430, binding = 0) buffer a 
{
    float A[];
};

layout(std430, binding = 1) buffer Sum
{
    float sum[];
};

shared float cache[2 * BLOCK_SIZE];

void main() {
    uint size = PushConstant.len;
    // uint idx = gl_GlobalInvocationID.x;
    uint lidx = gl_LocalInvocationID.x;
    uint gidx = gl_WorkGroupID.x;
    uint start = gidx * BLOCK_SIZE;

    cache[lidx] = A[start + lidx];

    int offset = 1;
    for (uint n = size / 2; n > 0; n /= 2) {
        barrier();
        if (lidx < n) {
            uint ai = offset * (2 * lidx + 1) - 1;
            uint bi = offset * (2 * lidx + 2) - 1;
            cache[bi] += cache[ai];
        }
        offset *= 2;
    } 
    if (lidx == 0) {
        cache[size - 1] = 0;
    }
    for (uint n = 1; n < size; n *= 2) {
        offset /= 2;
        barrier();
        if (lidx < n) {
            uint ai = offset * (2 * lidx + 1) - 1;
            uint bi = offset * (2 * lidx + 2) - 1;
            float temp = cache[ai];
            cache[ai] = cache[bi];
            cache[bi] += temp;
        }
        barrier();
        sum[start + lidx] = cache[lidx];
    }
}